#!/usr/bin/env bash
# gen_homeserver_config.sh â€” generate a minimal Synapse homeserver.yaml for a given hostname
# Usage:
#   ./gen_homeserver_config.sh omv.time-puffin.ts.net
#   ./gen_homeserver_config.sh example.ts.net --output /docker/synapse/synapse/data/homeserver.yaml --db-user synapse --db-pass 'supersecret' --db-host postgres --db-port 5432 --db-name synapse --turn-secret 'hex64' --enable-registration false --allow-guests false --with-turn-tls
#
# Prereqs: bash, openssl
# Notes:
# - Secrets are generated if not provided.
# - coturn must be configured with the same static-auth-secret printed at the end.

set -euo pipefail

# Defaults
OUT="/docker/synapse/synapse/data/homeserver.yaml"
DB_USER="synapse"
DB_PASS=""
DB_HOST="postgres"
DB_PORT="5432"
DB_NAME="synapse"
ENABLE_REGISTRATION="false"
ALLOW_GUESTS="false"
WITH_TURN_TLS="false"
TURN_SECRET=""

usage() {
  echo "Usage: $0 <server_name> [--output PATH] [--db-user USER] [--db-pass PASS] [--db-host HOST] [--db-port PORT] [--db-name NAME] [--turn-secret HEX64] [--enable-registration true|false] [--allow-guests true|false] [--with-turn-tls]"
  exit 1
}

need() {
  command -v "$1" >/dev/null 2>&1 || { echo "Missing dependency: $1"; exit 1; }
}

gen_hex64() {
  openssl rand -hex 64
}

[[ $# -ge 1 ]] || usage
SERVER_NAME="$1"
shift || true

while [[ $# -gt 0 ]]; do
  case "$1" in
    --output) OUT="${2:-}"; shift 2 ;;
    --db-user) DB_USER="${2:-}"; shift 2 ;;
    --db-pass) DB_PASS="${2:-}"; shift 2 ;;
    --db-host) DB_HOST="${2:-}"; shift 2 ;;
    --db-port) DB_PORT="${2:-}"; shift 2 ;;
    --db-name) DB_NAME="${2:-}"; shift 2 ;;
    --turn-secret) TURN_SECRET="${2:-}"; shift 2 ;;
    --enable-registration) ENABLE_REGISTRATION="${2:-}"; shift 2 ;;
    --allow-guests) ALLOW_GUESTS="${2:-}"; shift 2 ;;
    --with-turn-tls) WITH_TURN_TLS="true"; shift 1 ;;
    -h|--help) usage ;;
    *) echo "Unknown arg: $1"; usage ;;
  esac
done

need openssl

# Secrets
MACAROON_SECRET="${MACAROON_SECRET:-$(gen_hex64)}"
REGISTRATION_SHARED_SECRET="${REGISTRATION_SHARED_SECRET:-$(gen_hex64)}"
if [[ -z "${TURN_SECRET}" ]]; then
  TURN_SECRET="$(gen_hex64)"
fi

# DB password
if [[ -z "${DB_PASS}" ]]; then
  if [[ -t 0 ]]; then
    read -rsp "Enter Postgres password for user '${DB_USER}': " DB_PASS
    echo
  else
    echo "Warning: --db-pass not provided and no TTY; using placeholder 'CHANGE_ME'." 1>&2
    DB_PASS="CHANGE_ME"
  fi
fi

# Paths and perms
umask 077
OUT_DIR="$(dirname "$OUT")"
mkdir -p "$OUT_DIR"

# TURN URIs
TURN_UDP="turn:${SERVER_NAME}:3478?transport=udp"
TURN_TCP="turn:${SERVER_NAME}:3478?transport=tcp"
TURNS_TCP="turns:${SERVER_NAME}:5349?transport=tcp"

# Write YAML
cat >"$OUT" <<YAML
# Autogenerated by gen_homeserver_config.sh
server_name: "${SERVER_NAME}"
public_baseurl: "https://${SERVER_NAME}/"

# Synapse signing key (path inside the container)
signing_key_path: "/data/${SERVER_NAME}.signing.key"

report_stats: false

trusted_reverse_proxy:
  - "172.16.0.0/12"

listeners:
  - port: 8008
    tls: false
    type: http
    x_forwarded: true
    resources:
      - names: [client, federation]
        compress: false

database:
  name: psycopg2
  args:
    user: ${DB_USER}
    password: "${DB_PASS}"
    host: ${DB_HOST}
    port: ${DB_PORT}
    database: ${DB_NAME}

media_store_path: "/data/media"

# TURN configuration (must match your coturn settings)
turn_uris:
  - "${TURN_UDP}"
  - "${TURN_TCP}"$([[ "$WITH_TURN_TLS" == "true" ]] && printf "\n  - \"%s\"" "$TURNS_TCP")
turn_shared_secret: "${TURN_SECRET}"
turn_user_lifetime: "1h"
turn_allow_guests: ${ALLOW_GUESTS}

# Registration policy
enable_registration: ${ENABLE_REGISTRATION}
registration_requires_token: false

# Synapse secrets
macaroon_secret_key: "${MACAROON_SECRET}"
registration_shared_secret: "${REGISTRATION_SHARED_SECRET}"
YAML

# Final output
echo "Wrote: $OUT"
echo
echo "Summary:"
echo "  server_name: ${SERVER_NAME}"
echo "  database: ${DB_USER}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
echo "  turn_udp: ${TURN_UDP}"
echo "  turn_tcp: ${TURN_TCP}"
if [[ "$WITH_TURN_TLS" == "true" ]]; then
  echo "  turns_tcp: ${TURNS_TCP}"
fi
echo
echo "Copy this TURN static-auth-secret into coturn (must match exactly):"
echo "  ${TURN_SECRET}"
